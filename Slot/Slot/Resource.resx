<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Accept" xml:space="preserve">
    <value>ОК</value>
  </data>
  <data name="APIError" xml:space="preserve">
    <value>Произошла ошибка на API!</value>
  </data>
  <data name="Attributes" xml:space="preserve">
    <value>Атрибуты</value>
  </data>
  <data name="AvailableFree" xml:space="preserve">
    <value>Доступный объем</value>
  </data>
  <data name="Bool" xml:space="preserve">
    <value>Логическое</value>
  </data>
  <data name="Brotli" xml:space="preserve">
    <value>Brotli</value>
  </data>
  <data name="Byte" xml:space="preserve">
    <value>Байт</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Отмена</value>
  </data>
  <data name="Char" xml:space="preserve">
    <value>Символ</value>
  </data>
  <data name="ClipboardButton" xml:space="preserve">
    <value>В БУФЕР ОБМЕНА</value>
  </data>
  <data name="Compress" xml:space="preserve">
    <value>Комрессия</value>
  </data>
  <data name="Copy" xml:space="preserve">
    <value>Копировать</value>
  </data>
  <data name="CopyFile" xml:space="preserve">
    <value>Копировать файл</value>
  </data>
  <data name="CreateSubdir" xml:space="preserve">
    <value>Введите имя поддиректории</value>
  </data>
  <data name="CreationTime" xml:space="preserve">
    <value>Время создания</value>
  </data>
  <data name="Decompress" xml:space="preserve">
    <value>Декомпрессия</value>
  </data>
  <data name="Deflate" xml:space="preserve">
    <value>Deflate</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Удалить</value>
  </data>
  <data name="Destination" xml:space="preserve">
    <value>Будущий путь</value>
  </data>
  <data name="DestinationPath" xml:space="preserve">
    <value>Введите путь до файла:</value>
  </data>
  <data name="DestinationPathExample" xml:space="preserve">
    <value>Имя файла с расширением</value>
  </data>
  <data name="Destructive" xml:space="preserve">
    <value>убить</value>
  </data>
  <data name="Directories" xml:space="preserve">
    <value>Каталоги</value>
  </data>
  <data name="DirectoryName" xml:space="preserve">
    <value>Имя директории</value>
  </data>
  <data name="DocumentPlaceholder" xml:space="preserve">
    <value>Данные файла...</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Готово</value>
  </data>
  <data name="Double" xml:space="preserve">
    <value>Десятичное</value>
  </data>
  <data name="DriveInfoMessage" xml:space="preserve">
    <value>Информация о диске</value>
  </data>
  <data name="DriveInfoTitle" xml:space="preserve">
    <value>Обозреватель</value>
  </data>
  <data name="DriveName" xml:space="preserve">
    <value>Имя диска</value>
  </data>
  <data name="EnterAbsolutePath" xml:space="preserve">
    <value>Введите абсолютный путь</value>
  </data>
  <data name="EnterBinaryType" xml:space="preserve">
    <value>Укажите тип значения:</value>
  </data>
  <data name="EnterBinValue" xml:space="preserve">
    <value>Введите значение</value>
  </data>
  <data name="EnterDestinationPath" xml:space="preserve">
    <value>Путь относительно пакета</value>
  </data>
  <data name="EnterJsonComment" xml:space="preserve">
    <value>Введите JSON Коммент</value>
  </data>
  <data name="EnterJsonProperty" xml:space="preserve">
    <value>Введите JSON свойство</value>
  </data>
  <data name="EnterJsonType" xml:space="preserve">
    <value>Выберите JSON тип</value>
  </data>
  <data name="EnterJsonValue" xml:space="preserve">
    <value>Введите JSON значение</value>
  </data>
  <data name="EnterTextValue" xml:space="preserve">
    <value>Введите текст...</value>
  </data>
  <data name="EnterXmlAttribute" xml:space="preserve">
    <value>Создание XML атрибута</value>
  </data>
  <data name="EnterXmlComment" xml:space="preserve">
    <value>Введите комментарий XML</value>
  </data>
  <data name="EnterXmlElement" xml:space="preserve">
    <value>Создание XML элемента</value>
  </data>
  <data name="EnterXmlName" xml:space="preserve">
    <value>Введите имя тега</value>
  </data>
  <data name="EnterXmlValue" xml:space="preserve">
    <value>Введите XML значение</value>
  </data>
  <data name="Explorer" xml:space="preserve">
    <value>Проводник</value>
  </data>
  <data name="Export" xml:space="preserve">
    <value>Экспорт</value>
  </data>
  <data name="ExportUri" xml:space="preserve">
    <value>Укажите экспортный URI </value>
  </data>
  <data name="Extension" xml:space="preserve">
    <value>Расширение</value>
  </data>
  <data name="FileBinPageTitle" xml:space="preserve">
    <value>Бинарный файл</value>
  </data>
  <data name="FileInfoTitle" xml:space="preserve">
    <value>Сведения</value>
  </data>
  <data name="Files" xml:space="preserve">
    <value>Файлы</value>
  </data>
  <data name="Format" xml:space="preserve">
    <value>Формат</value>
  </data>
  <data name="FullName" xml:space="preserve">
    <value>Полное имя</value>
  </data>
  <data name="GZip" xml:space="preserve">
    <value>GZip</value>
  </data>
  <data name="ImagePageTitle" xml:space="preserve">
    <value>Изображение</value>
  </data>
  <data name="Import" xml:space="preserve">
    <value>Импорт</value>
  </data>
  <data name="ImportUri" xml:space="preserve">
    <value>Укажите импортный URI</value>
  </data>
  <data name="Int" xml:space="preserve">
    <value>Целочисленный</value>
  </data>
  <data name="InvalidJsonFile" xml:space="preserve">
    <value>Невалидный JSON файл</value>
  </data>
  <data name="InvalidXmlFile" xml:space="preserve">
    <value>Невалидный XML файл!</value>
  </data>
  <data name="IOError" xml:space="preserve">
    <value>Произошла IO ошибка!</value>
  </data>
  <data name="IOMessage" xml:space="preserve">
    <value>IO операция</value>
  </data>
  <data name="IsReady" xml:space="preserve">
    <value>Готов к IO</value>
  </data>
  <data name="IsSignIn" xml:space="preserve">
    <value>ВОЙТИ</value>
  </data>
  <data name="IsSignUp" xml:space="preserve">
    <value>ВСТУПИТЬ</value>
  </data>
  <data name="JsonComment" xml:space="preserve">
    <value>//</value>
  </data>
  <data name="JsonEndArray" xml:space="preserve">
    <value>]</value>
  </data>
  <data name="JsonEndObject" xml:space="preserve">
    <value>}</value>
  </data>
  <data name="JsonNull" xml:space="preserve">
    <value>null</value>
  </data>
  <data name="JsonPageTitle" xml:space="preserve">
    <value>JSON</value>
  </data>
  <data name="JsonProperty" xml:space="preserve">
    <value> "property" :</value>
  </data>
  <data name="JsonStartArray" xml:space="preserve">
    <value>[</value>
  </data>
  <data name="JsonStartObject" xml:space="preserve">
    <value>{</value>
  </data>
  <data name="JsonUndefined" xml:space="preserve">
    <value>undefined</value>
  </data>
  <data name="JsonValue" xml:space="preserve">
    <value>ЗНАЧЕНИЕ</value>
  </data>
  <data name="LastAccessTime" xml:space="preserve">
    <value>Последнее время доступа</value>
  </data>
  <data name="LastWriteTime" xml:space="preserve">
    <value>Последнее время записи</value>
  </data>
  <data name="Length" xml:space="preserve">
    <value>Размер</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Логин</value>
  </data>
  <data name="Long" xml:space="preserve">
    <value>Длинное</value>
  </data>
  <data name="Message" xml:space="preserve">
    <value>Сообщение</value>
  </data>
  <data name="Move" xml:space="preserve">
    <value>Перенести</value>
  </data>
  <data name="MoveDirectory" xml:space="preserve">
    <value>Перенести каталог</value>
  </data>
  <data name="MoveFile" xml:space="preserve">
    <value>Передвинуть файл</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Имя</value>
  </data>
  <data name="NotifyFooter" xml:space="preserve">
    <value>загружено за мс: </value>
  </data>
  <data name="ObjectCount" xml:space="preserve">
    <value>Обьектов внутри</value>
  </data>
  <data name="Parent" xml:space="preserve">
    <value>Родитель</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Пароль</value>
  </data>
  <data name="Root" xml:space="preserve">
    <value>Корень</value>
  </data>
  <data name="Seek" xml:space="preserve">
    <value>Введите номер позиции относительно текущей для перехода</value>
  </data>
  <data name="SeekTitle" xml:space="preserve">
    <value>Перейти</value>
  </data>
  <data name="SetLength" xml:space="preserve">
    <value>Введите новый размер файла в байтах</value>
  </data>
  <data name="SetLengthTitle" xml:space="preserve">
    <value>Изменить размер</value>
  </data>
  <data name="Short" xml:space="preserve">
    <value>Короткий</value>
  </data>
  <data name="SignOut" xml:space="preserve">
    <value>Логаут</value>
  </data>
  <data name="Size" xml:space="preserve">
    <value>Размер</value>
  </data>
  <data name="SlotAPI" xml:space="preserve">
    <value>Облако</value>
  </data>
  <data name="Streamer" xml:space="preserve">
    <value>Потокер</value>
  </data>
  <data name="StreamerTitle" xml:space="preserve">
    <value>Потокер</value>
  </data>
  <data name="String" xml:space="preserve">
    <value>Строка</value>
  </data>
  <data name="TextPageTitle" xml:space="preserve">
    <value>Текстовый документ</value>
  </data>
  <data name="ToAPI" xml:space="preserve">
    <value>На API-&gt;</value>
  </data>
  <data name="TotalFree" xml:space="preserve">
    <value>Общий свободный объем</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Вид диска</value>
  </data>
  <data name="VideoTitle" xml:space="preserve">
    <value>Видео</value>
  </data>
  <data name="VolumeLabel" xml:space="preserve">
    <value>Имя тома</value>
  </data>
  <data name="Write" xml:space="preserve">
    <value>Запись</value>
  </data>
  <data name="WriteBytes" xml:space="preserve">
    <value>Вводите через пробел байты,на конце пробела быть не должно</value>
  </data>
  <data name="WriteBytesTitle" xml:space="preserve">
    <value>Добавить байты</value>
  </data>
  <data name="WriteLine" xml:space="preserve">
    <value>Новая строка</value>
  </data>
  <data name="XmlAttribute" xml:space="preserve">
    <value>АТРИБУТ</value>
  </data>
  <data name="XmlAttributePattern" xml:space="preserve">
    <value>Имя и значение (через =)</value>
  </data>
  <data name="XmlComment" xml:space="preserve">
    <value>КОММЕНТ</value>
  </data>
  <data name="XmlEndDocument" xml:space="preserve">
    <value>КОНЕЦ ДОКУМЕНТА</value>
  </data>
  <data name="XmlEndElement" xml:space="preserve">
    <value>КОНЕЦ ЭЛЕМЕНТА</value>
  </data>
  <data name="XmlPageTitle" xml:space="preserve">
    <value>XML</value>
  </data>
  <data name="XmlStartDocument" xml:space="preserve">
    <value>СТАРТ ДОКУМЕНТА</value>
  </data>
  <data name="XmlStartElement" xml:space="preserve">
    <value>СТАРТ ЭЛЕМЕНТА</value>
  </data>
  <data name="XmlValue" xml:space="preserve">
    <value>ЗНАЧЕНИЕ</value>
  </data>
</root>